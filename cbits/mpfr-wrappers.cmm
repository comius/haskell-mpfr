#include "Cmm.h"
#include "MpfrDerivedConstants.h"

/*
TODO: check if MPFR_DECL_INIT gives better results than mpfr_init2
*/

#define MPFR_REBUILD(X, Y, Z, mpfr)                               \
  if (X >> PREC_SHIFT == 0) {                                     \
    MPFR__mpfr_sign(mpfr) = 1;                                    \
  } else {                                                        \
    MPFR__mpfr_sign(mpfr) = -1;                                   \
  }                                                               \
                                                                  \
  MPFR__mpfr_prec(mpfr) = X & ~(1 << PREC_SHIFT);                 \
  MPFR__mpfr_exp(mpfr) = Y;                                       \
  MPFR__mpfr_d(mpfr) = MPFR_MANGLE_PTR(BYTE_ARR_CTS(Z));

#define MPFR_RETURN1(mpfr)                                        \
  W_ sign_prec;                                                   \
  if (MPFR__mpfr_sign(mpfr) <= 1) {                               \
    sign_prec = MPFR__mpfr_prec(mpfr);                            \
  } else {                                                        \
    sign_prec = MPFR__mpfr_prec(mpfr) | (1 << PREC_SHIFT);        \
  }                                                               \
                                                                  \
  return(                                                         \
    sign_prec,                                                    \
    MPFR__mpfr_exp(mpfr),                                         \
    MPFR_UNMANGLE_PTR(MPFR__mpfr_d(mpfr)) - SIZEOF_StgArrWords);

mpfr_cmm_init_si(W_ rnd, W_ prec, W_ i)
{
  /* arguments: R1 = rounding, R2 = precision, R3 = int */
  W_ mpfr;

  STK_CHK_GEN_N(SIZEOF_MPFR);

  mpfr = Sp - SIZEOF_MPFR;

  ccall mpfr_init2(mpfr "ptr", prec);
  ccall mpfr_set_si(mpfr "ptr", i, rnd);

  MPFR_RETURN1(mpfr);
}

mpfr_cmm_init_z(W_ rnd, W_ prec, W_ sz, P_ d)
{
  /* arguments: R1 = rounding, R2 = precision, R3 = size, R4 = limbs */
  CInt s;
  W_ mpfr, mpz;

  s = W_TO_INT(sz);

again:
  STK_CHK_GEN_N(SIZEOF_MPFR + SIZEOF_MP_INT);
  MAYBE_GC(again);

  mpfr = Sp - SIZEOF_MPFR;
  mpz  = Sp - SIZEOF_MPFR - SIZEOF_MP_INT;

  MP_INT__mp_alloc(mpz) = W_TO_INT(BYTE_ARR_WDS(d));
  MP_INT__mp_size(mpz)  = (s);
  MP_INT__mp_d(mpz)     = BYTE_ARR_CTS(d);

  ccall mpfr_init2(mpfr "ptr", prec);
  ccall mpfr_set_z(mpfr "ptr", mpz, rnd);

  MPFR_RETURN1(mpfr);
}

mpfr_cmm_init_q(W_ rnd, W_ prec, W_ sz1, P_ d1, W_ sz2, P_ d2)
{
  /* arguments: R1 = rounding, R2 = precision,
                R3 = numerator size, R4 = numerator limbs
                R5 = denominator size, R6 = denominator limbs */
  CInt s1, s2;
  W_ mpfr, mpq;

  rnd = R1;
  prec = R2;
  s1 = W_TO_INT(sz1);
  d1 = R4;
  s2 = W_TO_INT(sz2);
  d2 = R6;

again:
  STK_CHK_GEN_N(SIZEOF_MPFR + SIZEOF_MP_RAT);
  MAYBE_GC(again);

  mpfr = Sp - SIZEOF_MPFR;
  mpq  = Sp - SIZEOF_MPFR - SIZEOF_MP_RAT;

  MP_RAT__mp_num__mp_alloc(mpq) = W_TO_INT(BYTE_ARR_WDS(d1));
  MP_RAT__mp_num__mp_size(mpq)  = (s1);
  MP_RAT__mp_num__mp_d(mpq)     = BYTE_ARR_CTS(d1);
  MP_RAT__mp_den__mp_alloc(mpq) = W_TO_INT(BYTE_ARR_WDS(d2));
  MP_RAT__mp_den__mp_size(mpq)  = (s2);
  MP_RAT__mp_den__mp_d(mpq)     = BYTE_ARR_CTS(d2);

  ccall mpfr_init2(mpfr "ptr", prec);
  ccall mpfr_set_q(mpfr "ptr", mpq "ptr", rnd);

  MPFR_RETURN1(mpfr);
}

mpfr_cmm_init_d(W_ rnd, W_ prec, D_ dbl)
{
  /* arguments: R1 = rounding, R2 = precision
                D1 = double */
  W_ mpfr;

  STK_CHK_GEN_N(SIZEOF_MPFR);

  mpfr = Sp - 1 * SIZEOF_MPFR;

  ccall mpfr_init2(mpfr "ptr", prec);
  ccall mpfr_set_d(mpfr "ptr", dbl, rnd);

  MPFR_RETURN1(mpfr);
}

mpfr_cmm_init_z_2exp(W_ rnd, W_ prec, W_ exp, W_ sz, P_ d)
{
  /* arguments: R1 = rounding, R2 = precision, R3 = exponent,
                R4 = mpz size, R5 = mpz limbs */
  CInt s;
  W_ mpfr, mpz;

  s = W_TO_INT(sz);

again:
  STK_CHK_GEN_N(SIZEOF_MPFR + SIZEOF_MP_INT);
  MAYBE_GC(again);

  mpfr = Sp - SIZEOF_MPFR;
  mpz  = Sp - SIZEOF_MPFR - SIZEOF_MP_INT;

  MP_INT__mp_alloc(mpz) = W_TO_INT(BYTE_ARR_WDS(d));
  MP_INT__mp_size(mpz)  = (s);
  MP_INT__mp_d(mpz)     = BYTE_ARR_CTS(d);

  ccall mpfr_init2(mpfr "ptr", prec);
  ccall mpfr_set_z_2exp(mpfr "ptr", mpz "ptr", exp, rnd);

  MPFR_RETURN1(mpfr);
}

mpfr_cmm_get_d(W_ rnd, W_ ps, W_ exp, P_ limbs)
{
  D_ ret;
  W_ mpfr;

again:
  STK_CHK_GEN_N(SIZEOF_MPFR);
  MAYBE_GC(again);

  mpfr = Sp - 1 * SIZEOF_MPFR;

  MPFR_REBUILD(ps, exp, limbs, mpfr);

  (ret) = ccall mpfr_get_d(mpfr "ptr", rnd);

  return (ret);
}

// arguments: R1 = prec * sign, R2 = exp, R3 = limbs
mpfr_cmm_get_z_2exp(W_ ps, W_ exp, P_ limbs)
{
  W_ mpz, mpfr;

again:
  STK_CHK_GEN_N(SIZEOF_MP_INT + SIZEOF_MPFR);
  MAYBE_GC(again);

  mpz = Sp - 1 * SIZEOF_MP_INT;
  mpfr = Sp - 1 * SIZEOF_MP_INT - 1 * SIZEOF_MPFR;

  MPFR_REBUILD(ps, exp, limbs, mpfr);

  ccall __gmpz_init(mpz "ptr");

  // Since we're immutable, we could really just reuse the limbs, but I haven't figured
  // out how to do that reliably yet.
  (exp) = ccall mpfr_get_z_2exp(mpz "ptr", mpfr "ptr");

  return(
    exp,
    TO_W_(MP_INT__mp_size(mpz)),
    MP_INT__mp_d(mpz) - SIZEOF_StgArrWords);
}

mpfr_cmm_sgn(W_ ps, W_ exp, W_ limbs)
{
  // arguments: R1 = prec * sign, R2 = exp, R3 = limbs
  W_ ret, mpfr;

again:
  STK_CHK_GEN_N(SIZEOF_MPFR);
  MAYBE_GC(again);

  mpfr = Sp - 1 * SIZEOF_MPFR;

  MPFR_REBUILD(ps, exp, limbs, mpfr);

  /* TODO check for NaN? */
  (ret) = ccall mpfr_sgn(mpfr "ptr");

  return (ret);
}

mpfr_cmm_cmp(W_ ps1, W_ exp1, P_ limbs1, W_ ps2, W_ exp2, P_ limbs2)
{
  /* arguments: R1 = prec * sign, R2 = exp, R3 = limbs
                R4 = prec * sign, R5 = exp, R6 = limbs
   */
  W_ ret, err, op1, op2;

again:
  STK_CHK_GEN_N(SIZEOF_MPFR * 2);
  MAYBE_GC(again);

  op1 = Sp - 1 * SIZEOF_MPFR;
  op2 = Sp - 2 * SIZEOF_MPFR;

  MPFR_REBUILD(ps1, exp1, limbs1, op1);
  MPFR_REBUILD(ps2, exp2, limbs2, op2);

  ccall mpfr_clear_erangeflag();
  (ret) = ccall mpfr_cmp(op1 "ptr",op2 "ptr");
  if (ret == 0) {
    (err) = ccall mpfr_erangeflag_p();
    if (err != 0) {
      ccall mpfr_clear_erangeflag();
    }
    ret = err;
  }
  return (ret);
}

mpfr_cmm_get_str(W_ rnd, W_ n, W_ base, W_ ps, W_ exp, P_ limbs)
{
  // arguments: R1 = rounding mode, R2 = output precision,R3 = output number base, R4 = prec * sign, R5 = exp, R6 = limbs
  W_ ret;
  W_ mpfr;

again:
  STK_CHK_GEN_N(SIZEOF_MPFR + WDS(1));
  MAYBE_GC(again);

  mpfr = Sp - 1 * SIZEOF_MPFR;

  MPFR_REBUILD(ps, exp, limbs, mpfr)

  W_ dec;
  dec = Sp - 1 * SIZEOF_MPFR - WDS(1);

  // Free the memory...
  (ret) = ccall mpfr_get_str(0, dec "ptr", base, n, mpfr "ptr", rnd);

  return (W_[dec], ret - SIZEOF_StgArrWords);
}


#define MPFR_COMPARISON(name,cmp)                             \
name(W_ ps1, W_ exp1, P_ limbs1, W_ ps2, W_ exp2, P_ limbs2)  \
{                                                             \
  W_ ret, op1, op2;                                           \
again:                                                        \
  STK_CHK_GEN_N(SIZEOF_MPFR * 2);                             \
  MAYBE_GC(again);                                            \
  op1 = Sp - 1 * SIZEOF_MPFR;                                 \
  op2 = Sp - 2 * SIZEOF_MPFR;                                 \
  MPFR_REBUILD(ps1, exp1, limbs1, op1);                       \
  MPFR_REBUILD(ps2, exp2, limbs2, op2);                       \
  (ret) = ccall cmp(op1 "ptr", op2 "ptr");                    \
  return (ret);                                               \
}

MPFR_COMPARISON(mpfr_cmm_equal_p, mpfr_equal_p)
MPFR_COMPARISON(mpfr_cmm_greater_p, mpfr_greater_p)
MPFR_COMPARISON(mpfr_cmm_greaterequal_p, mpfr_greaterequal_p)
MPFR_COMPARISON(mpfr_cmm_less_p, mpfr_less_p)
MPFR_COMPARISON(mpfr_cmm_lessequal_p, mpfr_lessequal_p)
MPFR_COMPARISON(mpfr_cmm_lessgreater_p, mpfr_lessgreater_p)
MPFR_COMPARISON(mpfr_cmm_unordered_p, mpfr_unordered_p)

#define MPFR_TEST(name,tst)                 \
name(W_ ps, W_ exp, P_ limbs)               \
{                                           \
  W_ ret, op;                               \
again:                                      \
  STK_CHK_GEN_N(SIZEOF_MPFR);               \
  MAYBE_GC(again);                          \
  op = Sp - 1 * SIZEOF_MPFR;                \
  MPFR_REBUILD(ps, exp, limbs, op);         \
  (ret) = ccall tst(op "ptr");              \
  return (ret);                             \
}

MPFR_TEST(mpfr_cmm_nan_p, mpfr_nan_p)
MPFR_TEST(mpfr_cmm_inf_p, mpfr_inf_p)
MPFR_TEST(mpfr_cmm_zero_p, mpfr_zero_p)

#define MPFR_TAKE2_RET1(name,mpfr_fun)                               \
name(W_ rnd, W_ prec, W_ ps1, W_ exp1, P_ limbs1, W_ ps2, W_ exp2, P_ limbs2) \
{                                                                    \
  W_ op1, op2, ret;                                       \
                                                                     \
again:                                                               \
  STK_CHK_GEN_N(3 * SIZEOF_MPFR);                                    \
  MAYBE_GC(again);                                                   \
                                                                     \
  op1 = Sp - 1 * SIZEOF_MPFR;                                        \
  op2 = Sp - 2 * SIZEOF_MPFR;                                        \
  ret = Sp - 3 * SIZEOF_MPFR;                                        \
                                                                     \
  MPFR_REBUILD(ps1, exp1, limbs1, op1);                              \
  MPFR_REBUILD(ps2, exp2, limbs2, op2);                              \
                                                                     \
  ccall mpfr_init2(ret "ptr", prec);                                 \
  ccall mpfr_fun(ret "ptr", op1 "ptr", op2 "ptr", rnd);              \
                                                                     \
  MPFR_RETURN1(ret);                                                 \
}

MPFR_TAKE2_RET1(mpfr_cmm_add, mpfr_add)
MPFR_TAKE2_RET1(mpfr_cmm_sub, mpfr_sub)
MPFR_TAKE2_RET1(mpfr_cmm_mul, mpfr_mul)
MPFR_TAKE2_RET1(mpfr_cmm_div, mpfr_div)
MPFR_TAKE2_RET1(mpfr_cmm_min, mpfr_min)
MPFR_TAKE2_RET1(mpfr_cmm_max, mpfr_max)
MPFR_TAKE2_RET1(mpfr_cmm_atan2, mpfr_atan2)

#define MPFR_INPLACE(name,mpfr_fun)          \
name(W_ ps, W_ exp, P_ limbs)                \
{                                            \
  W_ prec, ret;                              \
                                             \
  prec = ps & ~(1 << PREC_SHIFT);            \
                                             \
again:                                       \
  STK_CHK_GEN_N(SIZEOF_MPFR);                \
  MAYBE_GC(again);                           \
                                             \
  ret = Sp - 1 * SIZEOF_MPFR;                \
  MPFR_REBUILD(ps, exp, limbs, ret);         \
                                             \
  ccall mpfr_fun(ret "ptr");                 \
                                             \
  MPFR_RETURN1(ret);                         \
}

MPFR_INPLACE(mpfr_cmm_nextabove, mpfr_nextabove)
MPFR_INPLACE(mpfr_cmm_nextbelow, mpfr_nextbelow)

#define MPFR_TAKE1_RET1(name,mpfr_fun)                            \
name(W_ rnd, W_ prec, W_ ps, W_ exp, P_ limbs)                    \
{                                                                 \
  W_ rnd, op1, ret;                                               \
                                                                  \
again:                                                            \
  STK_CHK_GEN_N(2 * SIZEOF_MPFR);                                 \
  MAYBE_GC(again);                                                \
                                                                  \
  op1 = Sp - 1 * SIZEOF_MPFR;                                     \
  ret = Sp - 2 * SIZEOF_MPFR;                                     \
                                                                  \
  MPFR_REBUILD(ps, exp, limbs, op1);                              \
                                                                  \
  ccall mpfr_init2(ret "ptr", prec);                              \
  ccall mpfr_fun(ret "ptr", op1 "ptr", rnd);                      \
                                                                  \
  MPFR_RETURN1(ret);                                              \
}

MPFR_TAKE1_RET1(mpfr_cmm_set,  mpfr_set)
MPFR_TAKE1_RET1(mpfr_cmm_neg,  mpfr_neg)
MPFR_TAKE1_RET1(mpfr_cmm_log,  mpfr_log)
MPFR_TAKE1_RET1(mpfr_cmm_exp,  mpfr_exp)
MPFR_TAKE1_RET1(mpfr_cmm_sqrt, mpfr_sqrt)
MPFR_TAKE1_RET1(mpfr_cmm_cos,  mpfr_cos)
MPFR_TAKE1_RET1(mpfr_cmm_sin,  mpfr_sin)
MPFR_TAKE1_RET1(mpfr_cmm_tan,  mpfr_tan)
MPFR_TAKE1_RET1(mpfr_cmm_acos, mpfr_acos)
MPFR_TAKE1_RET1(mpfr_cmm_asin, mpfr_asin)
MPFR_TAKE1_RET1(mpfr_cmm_atan, mpfr_atan)
MPFR_TAKE1_RET1(mpfr_cmm_cosh, mpfr_cosh)
MPFR_TAKE1_RET1(mpfr_cmm_sinh, mpfr_sinh)
MPFR_TAKE1_RET1(mpfr_cmm_tanh, mpfr_tanh)
MPFR_TAKE1_RET1(mpfr_cmm_acosh, mpfr_acosh)
MPFR_TAKE1_RET1(mpfr_cmm_asinh, mpfr_asinh)
MPFR_TAKE1_RET1(mpfr_cmm_atanh, mpfr_atanh)

#define MPFR_CONSTANT(name,mpfr_constant)                        \
name(W_ rnd, W_ prec)                                            \
{                                                                \
  W_ mpfr;                                                       \
  STK_CHK_GEN_N(SIZEOF_MPFR);                                    \
  mpfr = Sp - 1 * SIZEOF_MPFR;                                   \
  ccall mpfr_init2(mpfr "ptr", prec);                            \
  ccall mpfr_constant(mpfr "ptr", rnd);                          \
                                                                 \
  MPFR_RETURN1(mpfr);                                            \
}

MPFR_CONSTANT(mpfr_cmm_const_pi, mpfr_const_pi)
MPFR_CONSTANT(mpfr_cmm_const_log2, mpfr_const_log2)
MPFR_CONSTANT(mpfr_cmm_const_euler, mpfr_const_euler)
MPFR_CONSTANT(mpfr_cmm_const_catalan, mpfr_const_catalan)
